openapi: 3.0.0
info:
  title: Innovix Retail API
  version: 1.0.0
paths:
  /stores:
    get:
      summary: List all stores
      responses:
        '200':
          description: A list of stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
    post:
      summary: Create a new store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '201':
          description: Created
  /stores/{storeId}:
    get:
      summary: Get a store by ID
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
    put:
      summary: Update a store
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete a store
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
  /shoppingcarts:
    get:
      summary: List all shopping carts
      responses:
        '200':
          description: A list of shopping carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingCart'
    post:
      summary: Create a new shopping cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCart'
      responses:
        '201':
          description: Created
  /shoppingcarts/{cartId}:
    get:
      summary: Get a shopping cart by ID
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single shopping cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
    put:
      summary: Update a shopping cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCart'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete a shopping cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
  /promotions:
    get:
      summary: List all promotions
      responses:
        '200':
          description: A list of promotions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotion'
    post:
      summary: Create a new promotion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
      responses:
        '201':
          description: Created
  /promotions/{promotionId}:
    get:
      summary: Get a promotion by ID
      parameters:
        - name: promotionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single promotion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
    put:
      summary: Update a promotion
      parameters:
        - name: promotionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete a promotion
      parameters:
        - name: promotionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
  /products:
    get:
      summary: List all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created
  /products/{productId}:
    get:
      summary: Get a product by ID
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
  /paymentmethods:
    get:
      summary: List all payment methods
      responses:
        '200':
          description: A list of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
    post:
      summary: Create a new payment method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
      responses:
        '201':
          description: Created
  /paymentmethods/{paymentMethodId}:
    get:
      summary: Get a payment method by ID
      parameters:
        - name: paymentMethodId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single payment method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
    put:
      summary: Update a payment method
      parameters:
        - name: paymentMethodId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete a payment method
      parameters:
        - name: paymentMethodId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
  /orders:
    get:
      summary: List all orders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Created
  /orders/{orderId}:
    get:
      summary: Get an order by ID
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    put:
      summary: Update an order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete an order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
  /customers:
    get:
      summary: List all customers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a new customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Created
  /customers/{customerId}:
    get:
      summary: Get a customer by ID
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      summary: Update a customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete a customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
  /categories:
    get:
      summary: List all categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Created
  /categories/{categoryId}:
    get:
      summary: Get a category by ID
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    put:
      summary: Update a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Updated
    delete:
      summary: Delete a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
components:
  schemas:
    Store:
      type: object
      properties:
        storeId:
          type: integer
        name:
          type: string
        address:
          type: string
        phone:
          type: string
    ShoppingCart:
      type: object
      properties:
        cartId:
          type: integer
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: string
    Promotion:
      type: object
      properties:
        promotionId:
          type: integer
        name:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        productId:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        stockQuantity:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        promotions:
          type: array
          items:
            $ref: '#/components/schemas/Promotion'
    PaymentMethod:
      type: object
      properties:
        paymentMethodId:
          type: integer
        type:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
    Order:
      type: object
      properties:
        orderId:
          type: integer
        customer:
          $ref: '#/components/schemas/Customer'
        orderDate:
          type: string
          format: date-time
        originAddress:
          type: string
        destinationAddress:
          type: string
        products:
          type: string
        paymentMethod:
          type: string
    Customer:
      type: object
      properties:
        customerId:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        paymentMethods:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
    Category:
      type: object
      properties:
        categoryId:
          type: integer
        name:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Address:
      type: object
      properties:
        addressId:
          type: integer
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
